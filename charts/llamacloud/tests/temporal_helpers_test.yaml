suite: temporal-helpers-tests
templates:
  # Test parse_delegate worker which uses ALL the helper templates
  - ../templates/temporal_parse/parse_delegate/deployment.yaml
  - ../templates/temporal_parse/parse_delegate/configmap.yaml
  - ../templates/temporal_parse/parse_delegate/secret.yaml
  - ../templates/temporal_parse/parse_delegate/service.yaml
  - ../templates/temporal_parse/parse_delegate/hpa.yaml
  - ../templates/temporal_parse/parse_delegate/keda-scaledobject.yaml
  - ../templates/temporal_parse/parse_delegate/serviceaccount.yaml
  - ../templates/temporal_parse/parse_delegate/servicemonitor.yaml
  # Test jobs_service worker as a second example
  - ../templates/temporal_jobs_service/jobs_service/deployment.yaml
  - ../templates/temporal_jobs_service/jobs_service/configmap.yaml
  - ../templates/temporal_jobs_service/jobs_service/secret.yaml
  - ../templates/temporal_jobs_service/jobs_service/service.yaml
  - ../templates/temporal_jobs_service/jobs_service/hpa.yaml
  - ../templates/temporal_jobs_service/jobs_service/keda-scaledobject.yaml
  - ../templates/temporal_jobs_service/jobs_service/serviceaccount.yaml
  - ../templates/temporal_jobs_service/jobs_service/servicemonitor.yaml
release:
  name: llamacloud
  namespace: default
capabilities:
  majorVersion: 1
  minorVersion: 28
tests:
  # ==========================================
  # Test _worker_deployment.tpl helper
  # ==========================================
  - it: temporalWorker.deployment should create deployment with standard fields
    set:
      temporal.enabled: true
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/deployment.yaml
    asserts:
      - isKind:
          of: Deployment
      - equal:
          path: apiVersion
          value: apps/v1
      - exists:
          path: metadata.name
      - exists:
          path: metadata.labels
      - exists:
          path: spec.selector
      - exists:
          path: spec.template.spec.containers[0]

  - it: temporalWorker.deployment should use custom replicas when autoscaling disabled
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.autoscaling.enabled: false
      temporalParse.parseDelegate.replicas: 5
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/deployment.yaml
    asserts:
      - equal:
          path: spec.replicas
          value: 5

  - it: temporalWorker.deployment should not set replicas when autoscaling enabled
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.autoscaling.enabled: true
      temporalParse.parseDelegate.replicas: 5
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/deployment.yaml
    asserts:
      - notExists:
          path: spec.replicas

  - it: temporalWorker.deployment should include service account name
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.serviceAccount.create: true
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/deployment.yaml
    asserts:
      - exists:
          path: spec.template.spec.serviceAccountName

  - it: temporalWorker.deployment should include command if specified
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.command:
        - "custom-command"
        - "arg1"
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[0].command[0]
          value: custom-command
      - equal:
          path: spec.template.spec.containers[0].command[1]
          value: arg1

  - it: temporalWorker.deployment should include extraEnvVariables
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.extraEnvVariables:
        - name: CUSTOM_VAR
          value: custom_value
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: CUSTOM_VAR
            value: custom_value

  # ==========================================
  # Test _worker_configmap.tpl helper
  # ==========================================
  - it: temporalWorker.configmap should create configmap with temporal host and port
    set:
      temporal.enabled: true
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/configmap.yaml
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: data.TEMPORAL_HOST
          value: "llamacloud-temporal-frontend.default.svc.cluster.local"
      - equal:
          path: data.TEMPORAL_PORT
          value: "7233"

  - it: temporalWorker.configmap should use external temporal host when configured
    set:
      temporal.enabled: true
      global.config.temporal.external.enabled: true
      global.config.temporal.external.host: custom-temporal.example.com
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/configmap.yaml
    asserts:
      - equal:
          path: data.TEMPORAL_HOST
          value: "custom-temporal.example.com"

  - it: temporalWorker.configmap should use external temporal port when configured
    set:
      temporal.enabled: true
      global.config.temporal.external.enabled: true
      global.config.temporal.external.port: 9999
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/configmap.yaml
    asserts:
      - equal:
          path: data.TEMPORAL_PORT
          value: "9999"

  # ==========================================
  # Test _worker_secret.tpl helper
  # ==========================================
  - it: temporalWorker.secret should create secret when external secrets disabled
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.externalSecrets.enabled: false
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/secret.yaml
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: type
          value: Opaque

  - it: temporalWorker.secret should not create secret when external secrets enabled
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.externalSecrets.enabled: true
      temporalParse.parseDelegate.externalSecrets.secrets:
        - external-secret-1
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/secret.yaml
    asserts:
      - hasDocuments:
          count: 0

  # ==========================================
  # Test _worker_service.tpl helper
  # ==========================================
  - it: temporalWorker.service should create service with correct structure
    set:
      temporal.enabled: true
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/service.yaml
    asserts:
      - isKind:
          of: Service
      - equal:
          path: spec.type
          value: ClusterIP
      - exists:
          path: spec.ports[0]

  - it: temporalWorker.service should use custom service type when provided
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.service.type: LoadBalancer
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/service.yaml
    asserts:
      - equal:
          path: spec.type
          value: LoadBalancer

  - it: temporalWorker.service should include metrics port when metrics enabled
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.metrics.enabled: true
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/service.yaml
    asserts:
      - contains:
          path: spec.ports
          content:
            name: metrics
            port: 9000
            protocol: TCP
            targetPort: 9000

  # ==========================================
  # Test _worker_hpa.tpl helper
  # ==========================================
  - it: temporalWorker.hpa should create HPA when autoscaling enabled
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.autoscaling.enabled: true
      temporalParse.parseDelegate.autoscaling.minReplicas: 2
      temporalParse.parseDelegate.autoscaling.maxReplicas: 10
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/hpa.yaml
    asserts:
      - isKind:
          of: HorizontalPodAutoscaler
      - equal:
          path: apiVersion
          value: autoscaling/v2
      - equal:
          path: spec.minReplicas
          value: 2
      - equal:
          path: spec.maxReplicas
          value: 10

  - it: temporalWorker.hpa should not create HPA when autoscaling disabled
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.autoscaling.enabled: false
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/hpa.yaml
    asserts:
      - hasDocuments:
          count: 0

  - it: temporalWorker.hpa should include CPU metrics when targetCPUUtilizationPercentage set
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.autoscaling.enabled: true
      temporalParse.parseDelegate.autoscaling.targetCPUUtilizationPercentage: 70
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/hpa.yaml
    asserts:
      - contains:
          path: spec.metrics
          content:
            type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: 70

  # ==========================================
  # Test _worker_keda.tpl helper
  # ==========================================
  - it: temporalWorker.keda should create ScaledObject when KEDA enabled
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.autoscaling.enabled: false
      temporalParse.parseDelegate.keda.enabled: true
      temporalParse.parseDelegate.keda.minReplicaCount: 1
      temporalParse.parseDelegate.keda.maxReplicaCount: 30
      temporalParse.parseDelegate.keda.triggers:
        - type: prometheus
          metadata:
            serverAddress: http://prometheus:9090
            query: sum(rate(temporal_worker_task_slots_available[5m]))
            threshold: "10"
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    capabilities:
      apiVersions:
        - keda.sh/v1alpha1
    template: ../templates/temporal_parse/parse_delegate/keda-scaledobject.yaml
    asserts:
      - isKind:
          of: ScaledObject
      - equal:
          path: apiVersion
          value: keda.sh/v1alpha1
      - equal:
          path: spec.minReplicaCount
          value: 1
      - equal:
          path: spec.maxReplicaCount
          value: 30

  - it: temporalWorker.keda should not create ScaledObject when KEDA disabled
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.keda.enabled: false
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/keda-scaledobject.yaml
    asserts:
      - hasDocuments:
          count: 0

  - it: temporalWorker.keda should not create ScaledObject without API version
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.keda.enabled: true
      temporalParse.parseDelegate.keda.minReplicaCount: 1
      temporalParse.parseDelegate.keda.maxReplicaCount: 30
      temporalParse.parseDelegate.keda.triggers:
        - type: prometheus
          metadata:
            serverAddress: http://prometheus:9090
            query: sum(rate(temporal_worker_task_slots_available[5m]))
            threshold: "10"
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/keda-scaledobject.yaml
    asserts:
      - hasDocuments:
          count: 0

  # ==========================================
  # Test _worker_serviceaccount.tpl helper
  # ==========================================
  - it: temporalWorker.serviceaccount should create ServiceAccount when create is true
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.serviceAccount.create: true
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/serviceaccount.yaml
    asserts:
      - isKind:
          of: ServiceAccount
      - equal:
          path: apiVersion
          value: v1

  - it: temporalWorker.serviceaccount should not create ServiceAccount when create is false
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.serviceAccount.create: false
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/serviceaccount.yaml
    asserts:
      - hasDocuments:
          count: 0

  - it: temporalWorker.serviceaccount should use custom name when provided
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.serviceAccount.create: true
      temporalParse.parseDelegate.serviceAccount.name: custom-sa
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/serviceaccount.yaml
    asserts:
      - equal:
          path: metadata.name
          value: custom-sa

  - it: temporalWorker.serviceaccount should include custom labels
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.serviceAccount.create: true
      temporalParse.parseDelegate.serviceAccount.labels:
        custom-label: custom-value
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/serviceaccount.yaml
    asserts:
      - equal:
          path: metadata.labels.custom-label
          value: custom-value

  - it: temporalWorker.serviceaccount should include custom annotations
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.serviceAccount.create: true
      temporalParse.parseDelegate.serviceAccount.annotations:
        custom-annotation: custom-value
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/serviceaccount.yaml
    asserts:
      - equal:
          path: metadata.annotations.custom-annotation
          value: custom-value

  # ==========================================
  # Test _worker_servicemonitor.tpl helper
  # ==========================================
  - it: temporalWorker.servicemonitor should create ServiceMonitor when monitoring enabled
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.metrics.enabled: true
      temporalParse.parseDelegate.metrics.serviceMonitor.enabled: true
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    capabilities:
      apiVersions:
        - monitoring.coreos.com/v1
    template: ../templates/temporal_parse/parse_delegate/servicemonitor.yaml
    asserts:
      - isKind:
          of: ServiceMonitor
      - equal:
          path: apiVersion
          value: monitoring.coreos.com/v1
      - exists:
          path: spec.endpoints[0]

  - it: temporalWorker.servicemonitor should not create ServiceMonitor when metrics disabled
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.metrics.enabled: false
      temporalParse.parseDelegate.metrics.serviceMonitor.enabled: true
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    capabilities:
      apiVersions:
        - monitoring.coreos.com/v1
    template: ../templates/temporal_parse/parse_delegate/servicemonitor.yaml
    asserts:
      - hasDocuments:
          count: 0

  - it: temporalWorker.servicemonitor should not create ServiceMonitor without API version
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.metrics.enabled: true
      temporalParse.parseDelegate.metrics.serviceMonitor.enabled: true
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/servicemonitor.yaml
    asserts:
      - hasDocuments:
          count: 0

  - it: temporalWorker.servicemonitor should use custom interval and scrapeTimeout
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.metrics.enabled: true
      temporalParse.parseDelegate.metrics.serviceMonitor.enabled: true
      temporalParse.parseDelegate.metrics.serviceMonitor.interval: 60s
      temporalParse.parseDelegate.metrics.serviceMonitor.scrapeTimeout: 30s
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    capabilities:
      apiVersions:
        - monitoring.coreos.com/v1
    template: ../templates/temporal_parse/parse_delegate/servicemonitor.yaml
    asserts:
      - equal:
          path: spec.endpoints[0].interval
          value: 60s
      - equal:
          path: spec.endpoints[0].scrapeTimeout
          value: 30s

  # ==========================================
  # Test that jobs_service worker also uses helpers correctly
  # ==========================================
  - it: temporalWorker helpers should work for jobs_service worker
    set:
      temporal.enabled: true
      temporalJobsService.jobsServiceWorker.serviceAccount.create: true
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_jobs_service/jobs_service/deployment.yaml
    asserts:
      - isKind:
          of: Deployment
      - exists:
          path: spec.template.spec.serviceAccountName

  - it: temporalWorker.configmap should work for jobs_service worker
    set:
      temporal.enabled: true
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_jobs_service/jobs_service/configmap.yaml
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: data.TEMPORAL_HOST
          value: "llamacloud-temporal-frontend.default.svc.cluster.local"

  # ==========================================
  # Test edge cases and validation
  # ==========================================
  - it: temporalWorker helpers should respect temporal.enabled flag
    set:
      temporal.enabled: false
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/deployment.yaml
    asserts:
      - hasDocuments:
          count: 0

  - it: temporalWorker.deployment should handle nodeSelector configuration
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.nodeSelector:
        node-type: temporal-worker
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector.node-type
          value: temporal-worker

  - it: temporalWorker.deployment should handle tolerations configuration
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.tolerations:
        - key: "temporal"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/deployment.yaml
    asserts:
      - equal:
          path: spec.template.spec.tolerations[0].key
          value: temporal
      - equal:
          path: spec.template.spec.tolerations[0].effect
          value: NoSchedule

  - it: temporalWorker.deployment should handle affinity configuration
    set:
      temporal.enabled: true
      temporalParse.parseDelegate.affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-type
                    operator: In
                    values:
                      - temporal-worker
      mongodb.enabled: false
      postgresql.enabled: false
      rabbitmq.enabled: false
      redis.enabled: false
    template: ../templates/temporal_parse/parse_delegate/deployment.yaml
    asserts:
      - exists:
          path: spec.template.spec.affinity.nodeAffinity
