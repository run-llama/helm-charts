suite: frontend-tests

templates:
- ../templates/frontend/deployment.yaml
- ../templates/frontend/service.yaml
- ../templates/frontend/hpa.yaml
- ../templates/frontend/serviceaccount.yaml

release:
  name: test-release
  namespace: test-namespace

capabilities:
  majorVersion: 1
  minorVersion: 30
  apiVersions:
    - apps/v1
    - autoscaling/v2

chart:
  appVersion: 0.0.0

tests:
- it: should be a Deployment
  set:
    frontend.image.tag: latest
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/deployment.yaml
  asserts:
    - isKind:
        of: Deployment
    - equal:
        path: .spec.template.spec.containers[0].image
        value: docker.io/llamaindex/llamacloud-frontend:latest

- it: should use an external secret name for the license key if it is set
  set:
    global.config.existingLicenseKeySecret: existing-license-key
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/deployment.yaml
  asserts:
    - equal:
        path: .spec.template.spec.containers[0].env[?(@.name == "LLAMACLOUD_LICENSE_KEY")].valueFrom.secretKeyRef.name
        value: existing-license-key

- it: should set the correct BACKEND_URL when ingress is enabled
  set:
    ingress.enabled: true
    ingress.scheme: https
    ingress.host: llamacloud.example.com
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/deployment.yaml
  asserts:
    - equal:
        path: .spec.template.spec.containers[0].env[?(@.name == "BACKEND_URL")].value
        value: "https://llamacloud.example.com"

- it: should set the correct BACKEND_URL when ingress is disabled
  set:
    ingress.enabled: false
    backend.name: backend
    backend.service.port: 8000
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/deployment.yaml
  asserts:
    - equal:
        path: .spec.template.spec.containers[0].env[?(@.name == "BACKEND_URL")].value
        value: "http://test-release-llamacloud-backend:8000"

- it: should set NEXT_PUBLIC_BYOC_HAS_MANAGED_QDRANT when qdrant is enabled
  set:
    backend.config.qdrant.enabled: true
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/deployment.yaml
  asserts:
    - equal:
        path: .spec.template.spec.containers[0].env[?(@.name == "NEXT_PUBLIC_BYOC_HAS_MANAGED_QDRANT")].value
        value: "true"

- it: should not set NEXT_PUBLIC_BYOC_HAS_MANAGED_QDRANT when qdrant is disabled
  set:
    backend.config.qdrant.enabled: false
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/deployment.yaml
  asserts:
    - notExists:
        path: .spec.template.spec.containers[0].env[?(@.name == "NEXT_PUBLIC_BYOC_HAS_MANAGED_QDRANT")]

- it: should use the custom service account if it is set
  set:
    frontend.serviceAccount.name: test-service-account
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/deployment.yaml
  asserts:
    - equal:
        path: .spec.template.spec.serviceAccountName
        value: test-service-account

- it: should mount TLS CA certificate when TLS is enabled with secret
  set:
    frontend.config.tls.enabled: true
    frontend.config.tls.caCertSecretName: tls-ca-secret
    frontend.config.tls.caCertMountPath: /etc/ssl/certs
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/deployment.yaml
  asserts:
    - equal:
        path: .spec.template.spec.containers[0].volumeMounts[0].name
        value: ca-certs
    - equal:
        path: .spec.template.spec.containers[0].volumeMounts[0].mountPath
        value: /etc/ssl/certs
    - equal:
        path: .spec.template.spec.volumes[0].secret.secretName
        value: tls-ca-secret
    - equal:
        path: .spec.template.spec.containers[0].env[?(@.name == "NODE_EXTRA_CA_CERTS")].value
        value: "/etc/ssl/certs/cert.pem"

- it: should mount TLS CA certificate when TLS is enabled with configmap
  set:
    frontend.config.tls.enabled: true
    frontend.config.tls.caCertConfigMapName: tls-ca-configmap
    frontend.config.tls.caCertMountPath: /etc/ssl/certs
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/deployment.yaml
  asserts:
    - equal:
        path: .spec.template.spec.containers[0].volumeMounts[0].name
        value: ca-certs
    - equal:
        path: .spec.template.spec.containers[0].volumeMounts[0].mountPath
        value: /etc/ssl/certs
    - equal:
        path: .spec.template.spec.volumes[0].configMap.name
        value: tls-ca-configmap
    - equal:
        path: .spec.template.spec.containers[0].env[?(@.name == "NODE_EXTRA_CA_CERTS")].value
        value: "/etc/ssl/certs/cert.pem"

- it: should set replicas based on autoscaling configuration
  set:
    frontend.autoscaling.enabled: true
    frontend.autoscaling.minReplicas: 2
    frontend.replicas: 5
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/deployment.yaml
  asserts:
    - equal:
        path: .spec.replicas
        value: 2

- it: should set replicas based on static configuration when autoscaling is disabled
  set:
    frontend.autoscaling.enabled: false
    frontend.replicas: 3
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/deployment.yaml
  asserts:
    - equal:
        path: .spec.replicas
        value: 3

- it: should create a Service with correct configuration
  set:
    frontend.service.type: ClusterIP
    frontend.service.port: 3000
    frontend.containerPort: 3000
    frontend.service.labels:
      foo: bar
    frontend.service.annotations:
      tailscale.com/expose: "true"
      tailscale.com/hostname: "test-release-llamacloud-frontend.internal"
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/service.yaml
  asserts:
    - isKind:
        of: Service
    - equal:
        path: .spec.type
        value: ClusterIP
    - equal:
        path: .spec.ports[0].port
        value: 3000
    - equal:
        path: .spec.ports[0].targetPort
        value: http
    - equal:
        path: .spec.selector["app.kubernetes.io/component"]
        value: test-release-llamacloud-frontend
    - equal:
        path: .metadata.annotations["tailscale.com/expose"]
        value: "true"
    - equal:
        path: .metadata.annotations["tailscale.com/hostname"]
        value: "test-release-llamacloud-frontend.internal"
    - equal:
        path: .metadata.labels["foo"]
        value: bar

- it: should create a HorizontalPodAutoscaler if autoscaling is enabled
  set:
    frontend.autoscaling.enabled: true
    frontend.autoscaling.minReplicas: 2
    frontend.autoscaling.maxReplicas: 10
    frontend.autoscaling.targetCPUUtilizationPercentage: 80
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/hpa.yaml
  asserts:
    - isKind:
        of: HorizontalPodAutoscaler
    - equal:
        path: .spec.minReplicas
        value: 2
    - equal:
        path: .spec.maxReplicas
        value: 10
    - equal:
        path: .spec.metrics[0].resource.target.averageUtilization
        value: 80

- it: should not create a HorizontalPodAutoscaler if autoscaling is disabled
  set:
    frontend.autoscaling.enabled: false
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/hpa.yaml
  asserts:
    - hasDocuments:
        count: 0

- it: should create HPA with both CPU and memory metrics when both are specified
  set:
    frontend.autoscaling.enabled: true
    frontend.autoscaling.minReplicas: 1
    frontend.autoscaling.maxReplicas: 5
    frontend.autoscaling.targetCPUUtilizationPercentage: 70
    frontend.autoscaling.targetMemoryUtilizationPercentage: 80
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/hpa.yaml
  asserts:
    - equal:
        path: .spec.metrics[0].resource.name
        value: cpu
    - equal:
        path: .spec.metrics[0].resource.target.averageUtilization
        value: 70
    - equal:
        path: .spec.metrics[1].resource.name
        value: memory
    - equal:
        path: .spec.metrics[1].resource.target.averageUtilization
        value: 80

- it: should create a ServiceAccount if create is true
  set:
    frontend.serviceAccount.create: true
    frontend.serviceAccount.name: custom-frontend-sa
    frontend.serviceAccount.automountServiceAccountToken: false
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/serviceaccount.yaml
  asserts:
    - isKind:
        of: ServiceAccount
    - equal:
        path: .metadata.name
        value: custom-frontend-sa
    - equal:
        path: .automountServiceAccountToken
        value: false

- it: should not create a ServiceAccount if create is false
  set:
    frontend.serviceAccount.create: false
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/serviceaccount.yaml
  asserts:
    - hasDocuments:
        count: 0

- it: should apply custom labels and annotations to all resources
  set:
    frontend.labels:
      custom-label: frontend-value
    frontend.annotations:
      custom-annotation: frontend-annotation
    frontend.service.labels:
      service-label: service-value
    frontend.service.annotations:
      service-annotation: service-annotation
    frontend.serviceAccount.labels:
      sa-label: sa-value
    frontend.serviceAccount.annotations:
      sa-annotation: sa-annotation
    frontend.podLabels:
      pod-label: pod-value
    frontend.podAnnotations:
      pod-annotation: pod-annotation
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  templates:
    - ../templates/frontend/deployment.yaml
    - ../templates/frontend/service.yaml
    - ../templates/frontend/serviceaccount.yaml
  asserts:
    - template: ../templates/frontend/deployment.yaml
      equal:
        path: .metadata.labels.custom-label
        value: frontend-value
    - template: ../templates/frontend/deployment.yaml
      equal:
        path: .metadata.annotations.custom-annotation
        value: frontend-annotation
    - template: ../templates/frontend/deployment.yaml
      equal:
        path: .spec.template.metadata.labels.pod-label
        value: pod-value
    - template: ../templates/frontend/deployment.yaml
      equal:
        path: .spec.template.metadata.annotations.pod-annotation
        value: pod-annotation
    - template: ../templates/frontend/service.yaml
      equal:
        path: .metadata.labels.service-label
        value: service-value
    - template: ../templates/frontend/service.yaml
      equal:
        path: .metadata.annotations.service-annotation
        value: service-annotation
    - template: ../templates/frontend/serviceaccount.yaml
      equal:
        path: .metadata.labels.sa-label
        value: sa-value
    - template: ../templates/frontend/serviceaccount.yaml
      equal:
        path: .metadata.annotations.sa-annotation
        value: sa-annotation

- it: should include extra environment variables when specified
  set:
    frontend.extraEnvVariables:
      - name: CUSTOM_ENV_VAR
        value: custom-value
      - name: ANOTHER_VAR
        valueFrom:
          secretKeyRef:
            name: my-secret
            key: my-key
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/deployment.yaml
  asserts:
    - equal:
        path: .spec.template.spec.containers[0].env[?(@.name == "CUSTOM_ENV_VAR")].value
        value: custom-value
    - equal:
        path: .spec.template.spec.containers[0].env[?(@.name == "ANOTHER_VAR")].valueFrom.secretKeyRef.name
        value: my-secret

- it: should set rolling update strategy with correct parameters
  set:
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/deployment.yaml
  asserts:
    - equal:
        path: .spec.strategy.type
        value: RollingUpdate
    - equal:
        path: .spec.strategy.rollingUpdate.maxUnavailable
        value: 1

- it: should set correct security contexts
  set:
    frontend.podSecurityContext:
      runAsNonRoot: true
      runAsUser: 1000
    frontend.securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
    mongodb.enabled: false
    postgresql.enabled: false
    rabbitmq.enabled: false
    redis.enabled: false
  template: ../templates/frontend/deployment.yaml
  asserts:
    - equal:
        path: .spec.template.spec.securityContext.runAsNonRoot
        value: true
    - equal:
        path: .spec.template.spec.securityContext.runAsUser
        value: 1000
    - equal:
        path: .spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
        value: false
    - equal:
        path: .spec.template.spec.containers[0].securityContext.readOnlyRootFilesystem
        value: true